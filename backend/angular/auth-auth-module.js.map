{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/signup/signup.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input matInput name=\"email\" ngModel #emailInput=\"ngModel\" type=\"email\" placeholder=\"E-mail address\" required\n        email>\n      <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput name=\"password\" ngModel #passwordInput=\"ngModel\" type=\"password\" placeholder=\"Password\" required>\n      <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">Signup</button>\n  </form>\n</mat-card>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSubs: Subscription;\n\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authStatusSubs = this.authService.getAuthStatusListener().subscribe((authStatus) => {\n      this.isLoading = false;\n    });\n  }\n\n  onSignup(form: NgForm): void {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.createUser(form.value.email, form.value.password);\n  }\n\n  ngOnDestroy(): void {\n    this.authStatusSubs.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '../angular-material.module';\nimport { AuthRoutingModule } from './auth-routing.module';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\n@NgModule({\n  imports: [\n    AngularMaterialModule,\n    AuthRoutingModule,\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    LoginComponent,\n    SignupComponent\n  ]\n})\nexport class AuthModule {}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input matInput name=\"email\" ngModel #emailInput=\"ngModel\" type=\"email\" placeholder=\"E-mail address\" required email>\n      <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput name=\"password\" ngModel #passwordInput=\"ngModel\" type=\"password\" placeholder=\"Password\" required>\n      <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">Login</button>\n  </form>\n</mat-card>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSubs: Subscription;\n\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authStatusSubs = this.authService.getAuthStatusListener().subscribe((authStatus) => {\n      this.isLoading = false;\n    });\n  }\n\n  onLogin(form: NgForm): void {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.login(form.value.email, form.value.password);\n  }\n\n  ngOnDestroy(): void {\n    this.authStatusSubs.unsubscribe();\n  }\n}\n"],"sourceRoot":"webpack:///"}